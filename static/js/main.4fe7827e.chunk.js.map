{"version":3,"sources":["profile.jpg","london.jpg","components/Header.js","components/Media.js","components/ActionsBar.js","components/Likes.js","components/Caption.js","components/Posted.js","components/Comment.js","components/Card.js","cardData.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","src","profileImageUrl","alt","username","Media","mediaUrl","ActionsBar","like","Likes","likes","Caption","caption","Posted","posted","Comment","aria-label","placeholder","autocomplete","autocorrect","Component","Card","components_Header","components_Media","components_ActionsBar","components_Likes","components_Caption","components_Posted","components_Comment","cardData","liked","App","components_Card","headshot","data","media","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4fe7827e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.b854438d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/london.43ba9126.jpg\";","import React from 'react';\n\nconst Header = props => (\n    <div className=\"header\">\n        <div className=\"left\">\n            <img src={props.profileImageUrl} alt=\"profile\" className=\"profile__img\" />\n            <div className=\"user__name\">\n                {props.username}\n            </div>\n        </div>\n    </div>\n);\n\nexport default Header;","import React from 'react';\n\nconst Media = props => (\n<div className=\"media\">\n    <img src={props.mediaUrl} alt=\"media\" className=\"mediaPhoto\"/>\n</div>\n);\n\nexport default Media;","import React from 'react';\n\n\nconst ActionsBar =  props => (\n    <div className=\"ActionBar\">\n        <div className=\"left\">\n            <div className=\"like\">\n                <i className={props.like}></i>\n            </div>\n            <div className=\"comment\">\n                <i className=\"far fa-comment\"></i>\n            </div>\n            <div className=\"share\">\n                <i className=\"fas fa-share\"></i>\n            </div>\n        </div>\n    </div>\n);\n\nexport default ActionsBar;","import React from 'react';\n\nconst Likes = props => (\n    <div className=\"likes\">\n        {props.likes} likes\n    </div>\n);\n\nexport default Likes;","import React from 'react';\n\nconst Caption = props => (\n    <div className=\"caption\">\n        <div className=\"left\">\n            <div className=\"cap-username\">\n                {props.username}\n            </div>\n            <div className=\"cap-text\">\n                {props.caption}\n            </div>\n        </div>\n    </div>\n);\n\nexport default Caption;","import React from 'react';\n\nconst Posted = props => (\n    <div className=\"posted\">\n        {props.posted}\n    </div>\n);\n\nexport default Posted;","import React, { Component } from 'react';\n\nclass Comment extends Component {\n    render() {\n      return (\n        <div className=\"submit__comment\">\n            <textarea aria-label=\"Add a comment…\" placeholder=\"Add a comment…\" className=\"comment-textarea\" autocomplete=\"off\" autocorrect=\"off\"></textarea>\n        </div>\n        );\n      }\n}\n\nexport default Comment;","import React from 'react';\nimport Header from './Header';\nimport Media from './Media';\nimport ActionsBar from './ActionsBar';\nimport Likes from './Likes';\nimport Caption from './Caption';\nimport Posted from './Posted';\nimport Comment from './Comment';\n\nconst Card = props => (\n<div className=\"card\">\n    <Header \n        profileImageUrl={props.profileImageUrl}\n        username={props.username} />\n    <Media \n        mediaUrl={props.mediaUrl} />\n    <div className=\"container\">\n        <ActionsBar \n        like={props.like} />\n        <Likes \n        likes={props.likes} />\n        <Caption \n        username={props.username}\n        caption={props.caption} />\n        <Posted\n        posted={props.posted} />\n        <Comment />\n    </div>\n    \n    \n</div>\n);\n\nexport default Card;","const cardData = {\n\n    username: 'migsalazr',\n\n    likes: '120',\n\n    liked: 'far fa-heart',\n\n    caption: 'London 2017 #potd #photography',\n\n    posted: '5 DAYS AGO',\n\n}\n\nexport default cardData;","import React, { Component } from 'react';\nimport '../styles/App.css';\nimport Card from './Card';\nimport data from '../cardData';\nimport headshot from '../profile.jpg';\nimport media from '../london.jpg';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n       <Card \n          profileImageUrl={headshot}\n          username={data.username}\n          mediaUrl={media}\n          like={data.liked}\n          likes={data.likes}\n          caption={data.caption}\n          posted={data.posted}\n       />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}